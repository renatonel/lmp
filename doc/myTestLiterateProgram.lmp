---
title: Test Literate Program
file-extentions: c
tangle: clang main.c
---

This is an example literate program.

We will demonstrate a very rudementary go program.

First, a note on the frontmatter.
Frontmatter contains meta-information, describing the type of language,
it's file extensions, the build command etc. Front matter is enclosed in
a `---` block.

The very first line of the file need to start with `---`, followed by
whitespace or a new line. Anything else will be ignored as frontmatter.

Within the frontmatter is a list of key:value pairs in any order. The
possible keys are:

- title : The name of this document. When weaved, this will be the name
  of the generated document.

- file-extension : a list of space separated file extensions. Any code
  segment ending with one of these extensions (preceded by a dot), will
  be assumed to be a file name, and the content of the code segment will
  be included in that file.
  Example: `file-extension: c h`
  Any code segment like `--- main.c`, `--- main.h` or `--- abc.h` will
  create file `main.c`, `main.h` and `abc.h` respectively.

- tangle : the command used to "tangle", ie build, the program. The output
  of this command must provide the binary executables that will allow the
  program to be executed.

Now on to our example program source.
Let's write a simple C program:

--- main.c
#boilerplate

#arithmetic function

#program entry point
---

Let's first look at how we start our program, and how we want to use
the arithmetic function:

--- program entry point
int main() {
    printf("4 * 2 = %i\n", times_two(4));

    return 0;
}
---

We are using `printf`, so let's remember to add `stdio` to our import list:
---imports
#include <stdio.h>
---

So we want to times whatever we receive with 2:

--- arithmetic function
int times_two(int nr) {
    return nr * 2;
}
---

As for the boilerplate...
--- boilerplate
// Example program
// Some license info...

#imports
---

If we wanted to import more packages, we could use:
--- imports ++
// add some more imports as required...
---
Note the `++` after the block name. It will add this block to the first
block with the same name. If no previous block is found, is will treat
this as the first block.


So this is our first rudementary Literate Program.

To run it, use `lmp myTestLiterateProgram.lmp`, which will both wave and
tangle the program.
To just weave: `lmp --weave myTestLiterateProgram.lmp`
To just tangle: `lmp --tangle myTestLiterateProgram.lmp`

TODO: Add functionality to weave and tangle a document spread over many files.
